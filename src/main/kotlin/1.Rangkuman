1.Kotlin memiliki fungsi untuk mencetak nilai pada console, yaitu fungsi print() dan println().

2.Untuk mendeklarasi variable, Anda akan menggunakan kata kunci var atau val. var atau val digunakan untuk mengontrol nilai dari sebuah variabel. Dengan kata kunci var kita bisa mengubah nilai yang sudah kita inisialisasikan.

3.Untuk membuat variable yang menampung data berupa text, Anda dapat menggunakan tipe data Char untuk menyimpan satu karakter dan tipe data String untuk menyimpan beberapa karakter.
  Lalu, untuk menampung data berupa number, Anda akan menggunakan beberapa tipe data di bawah ini.

  Int (32 Bit)
  Int adalah tipe data yang umumnya digunakan untuk menyimpan nilai numerik. Int dapat menyimpan data dari range -231 sampai +231-1. Dengan ukuran 32 Bit, kita bisa menggunakannya untuk menyimpan nilai yang besar. Catatannya, tetap lihatlah batasan nilai maksimal yang dapat dimasukkan.

  Long (64 Bit)
  Long adalah tipe data yang digunakan untuk menyimpan nilai numerik yang lebih besar yaitu dari range -263 sampai +263-1.

  Short (16 Bit)
  Short merupakan sebuah bilangan bulat yang hanya dapat menyimpan nilai yang kecil karena hanya berukuran 16 Bit.

  Byte (8 Bit)
  Dengan ukuran yang kecil, Byte hanya mampu menyimpan nilai yang kecil sama halnya seperti Short. Byte biasa digunakan untuk keperluan proses membaca dan menulis data dari sebuah stream file atau jaringan.

  Double (64 Bit)
  Sama halnya dengan Long yang memiliki ukuran yang besar, Double mampu menyimpan nilai numerik yang besar pula. Pada umumnya, Double digunakan untuk menyimpan nilai numerik pecahan.

  Float (32 Bit)
  Float memiliki ukuran yang lebih kecil, yakni hanya sampai 6-7 angka di belakang koma.

4.Array, yakni tipe data yang memungkinkan Anda untuk menyimpan beberapa objek di dalam satu variabel.
 Kotlin juga memungkinkan Anda untuk membuat Array dengan tipe data primitif dengan memanfaatkan beberapa fungsi spesifik seperti berikut.
 intArrayOf() : IntArray
 booleanArrayOf() : BooleanArray
 charArrayOf() : CharArray
 longArrayOf() : LongArray
 shortArrayOf() : ShortArray
 byteArrayOf() : ByteArray

5.Boolean di mana tipe data yang hanya memiliki dua nilai, yaitu true dan false. Selain itu, terdapat 3 (tiga) operator yang dapat digunakan pada Boolean.
 Conjunction atau AND (&&)
 Operator AND (&&) akan mengembalikan nilai true jika semua hasil evaluasi expression yang diberikan bernilai true.
 Disjunction atau OR (||)
 Berbeda dengan operator AND (&&), operator OR (||) akan mengembalikan nilai true jika hasil evaluasi dari salah satu expressions yang diberikan bernilai true.
 Negation atau NOT (!)
 Berbeda dengan operator AND (&&) dan operator OR(||), operator NOT(!) digunakan untuk melakukan negasi pada hasil evaluasi expression yang diberikan.

6.Jika ingin menginisialisasi nilai dari sebuah variabel berdasarkan suatu kondisi, gunakan If Expression.
  Dengan Kotlin kita mudah dalam mengelola variable nullable sehingga dapat meminimalisasi terjadinya NullPointerException dengan menggunakan Safe Call dan Elvis Operator.

7.Function atau fungsi merupakan sebuah prosedur yang memiliki keterkaitan dengan pesan dan objek. Ketika kita memanggil sebuah fungsi, sebuah mini-program akan dijalankan. Fungsi sendiri bisa diartikan sebagai cara sederhana untuk mengatur program buatan kita.

8.Anatomi dari sebuah function terdiri dari 2 (dua) bagian utama, yaitu function header dan function body:

  Function Header
  Function header adalah bagian yang merupakan konstruksi dari sebuah fungsi untuk menentukan perilakunya akan seperti apa. Di dalam function header terdapat visibility modifier, kata kunci fun, nama, daftar parameter dan nilai kembalian dari fungsi tersebut.

  Function Body
  Function Body adalah bagian yang dalamnya kita akan menempatkan sebuah logika kode baik itu sebuah expression atau statement.

9.Named argument berguna untuk menyebutkan nama parameter saat memanggil fungsi, sehingga Anda dapat memanggil fungsi dengan urutan argumen yang berbeda.
  Default argument berguna untuk memberikan nilai default pada parameter fungsi, sehingga Anda tidak perlu selalu memberikan nilai saat memanggil fungsi tersebut.

10.varargs dapat digunakan untuk menyederhanakan deklarasi beberapa parameter yang memiliki tipe yang sama.